image: docker:18-git

services:
  - docker:18-dind

stages:
  - build
  - test
  - staging
  - production

compile:
  stage: build
  script:
    # get node app version from package.json for use in tagging docker image
    - apk update && apk add jq
    - export VERSION=`jq -r ".version" < ./package.json`
    # login to docker
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # build and tag docker image
    - docker build -t $CI_REGISTRY_IMAGE:$VERSION -t $CI_REGISTRY_IMAGE:latest .
    # publish finished image
    - docker push $CI_REGISTRY_IMAGE:$VERSION
    - docker push $CI_REGISTRY_IMAGE:latest

test:
  stage: test
  script:
    - echo test ok!

deploy-to-prod:
  image: linuxserver/openssh-server:amd64-latest
  stage: production
  before_script:
    - "command -v ssh-agent >/dev/null || ( apk add --update openssh )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $VM_IPADDRESS >> ~/.ssh/known_hosts
  script:
    - ssh $SSH_USER@$VM_IPADDRESS "docker stop $CI_PROJECT_NAME || true"
    - ssh $SSH_USER@$VM_IPADDRESS "docker rm $CI_PROJECT_NAME || true"
    - ssh $SSH_USER@$VM_IPADDRESS "docker image rm $CI_REGISTRY_IMAGE:latest || true"
    - ssh $SSH_USER@$VM_IPADDRESS "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh $SSH_USER@$VM_IPADDRESS "docker pull $CI_REGISTRY_IMAGE:latest"
    - ssh $SSH_USER@$VM_IPADDRESS "cd apps/training-server && git checkout master && git pull origin master && echo pull new code success! && docker-compose -f docker-compose.prod.yml up -d"
